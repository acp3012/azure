{
	"name": "df_transform_hospital_admission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_hospital_admission_csv",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionSource"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_date",
						"type": "DatasetReference"
					},
					"name": "dimDateSource"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_country",
						"type": "DatasetReference"
					},
					"name": "countryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admission_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admission_daily",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				}
			],
			"transformations": [
				{
					"name": "SelectOnlyReqdColumns"
				},
				{
					"name": "countryLookupStream"
				},
				{
					"name": "SelectFinalReqdColumns"
				},
				{
					"name": "SplitDailyFromWeekly"
				},
				{
					"name": "AggDimDate"
				},
				{
					"name": "joinwithDate"
				},
				{
					"name": "pivotWeeklyOccupencyCount"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "SortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectFinalColumnsWeekly"
				},
				{
					"name": "selectFinalReqdColumnsDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as decimal(10,0),",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionSource",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false) ~> dimDateSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> countryLookup",
				"HospitalAdmissionSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyReqdColumns",
				"SelectOnlyReqdColumns, countryLookup lookup(SelectOnlyReqdColumns@country == countryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> countryLookupStream",
				"countryLookupStream select(mapColumn(",
				"          country = SelectOnlyReqdColumns@country,",
				"          indicator,",
				"          reported_date,",
				"          value,",
				"          reported_year_week,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinalReqdColumns",
				"SelectFinalReqdColumns split(instr(lower(indicator), 'weekly') >0,",
				"     disjoint: false) ~> SplitDailyFromWeekly@(weekly, daily)",
				"dimDateSource aggregate(groupBy(ecdc_year_week = year + '-W'+lpad(week_of_year, 2, '0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggDimDate",
				"SplitDailyFromWeekly@weekly, AggDimDate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwithDate",
				"joinwithDate pivot(groupBy(country,",
				"          reported_date,",
				"          reported_year_week,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotWeeklyOccupencyCount",
				"SplitDailyFromWeekly@daily pivot(groupBy(country,",
				"          reported_year_week,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          source,",
				"          population,",
				"          reported_date),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotDaily",
				"pivotWeeklyOccupencyCount sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> SortWeekly",
				"pivotDaily sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> sortDaily",
				"SortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hospital_occupency_count = {Weekly new hospital admissions per 100kcount},",
				"          new_icu_occupency_count = {Weekly new ICU admissions per 100kcount},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFinalColumnsWeekly",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          {Hospital occupancycount} = {Daily hospital occupancycount},",
				"          {ICU occupancycount} = {Daily ICU occupancycount},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFinalReqdColumnsDaily",
				"selectFinalReqdColumnsDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_admission_daily.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkDaily",
				"selectFinalColumnsWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_admission_weekly.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkWeekly"
			]
		}
	}
}